import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { AssessmentResults } from '@/components/ResultsPage';

export const generatePDFReport = async (results: AssessmentResults): Promise<void> => {
  try {
    const pdf = new jsPDF();
    
    // Add title
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Personal Assessment Report', 20, 30);
    
    // Add user info
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Name: ${results.userInfo.name}`, 20, 50);
    pdf.text(`Email: ${results.userInfo.email}`, 20, 60);
    pdf.text(`Date: ${results.userInfo.date}`, 20, 70);
    
    // Add overall score
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Overall Score', 20, 90);
    pdf.setFontSize(24);
    pdf.setTextColor(59, 130, 246); // Blue color
    pdf.text(`${results.overallScore}%`, 20, 105);
    
    // Reset color
    pdf.setTextColor(0, 0, 0);
    
    // Add category breakdown
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Category Breakdown', 20, 125);
    
    let yPosition = 140;
    results.scores.forEach((score) => {
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      pdf.text(score.category, 20, yPosition);
      
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Score: ${score.score}/${score.maxScore} (${score.percentage}%)`, 20, yPosition + 10);
      pdf.text(`Level: ${score.level}`, 20, yPosition + 20);
      
      // Add progress bar representation
      const barWidth = 100;
      const barHeight = 5;
      const fillWidth = (score.percentage / 100) * barWidth;
      
      // Background bar
      pdf.setFillColor(230, 230, 230);
      pdf.rect(20, yPosition + 25, barWidth, barHeight, 'F');
      
      // Fill bar
      let fillColor: [number, number, number] = [59, 130, 246]; // Default blue
      if (score.level === "High") fillColor = [34, 197, 94]; // Green
      else if (score.level === "Medium") fillColor = [249, 115, 22]; // Orange
      else if (score.level === "Low") fillColor = [239, 68, 68]; // Red
      
      pdf.setFillColor(...fillColor);
      pdf.rect(20, yPosition + 25, fillWidth, barHeight, 'F');
      
      yPosition += 45;
      
      // Add new page if needed
      if (yPosition > 250) {
        pdf.addPage();
        yPosition = 30;
      }
    });
    
    // Add reflection questions on new page
    pdf.addPage();
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Self-Reflection Questions', 20, 30);
    
    yPosition = 50;
    const reflectionQuestions = {
      "Social Skills": [
        "How do you typically respond when someone disagrees with you?",
        "What communication style works best for you in different situations?",
        "How do you build rapport with new people?"
      ],
      "Self Awareness": [
        "What emotions do you find most challenging to manage?",
        "How do your values influence your daily decisions?",
        "What patterns do you notice in your stress responses?"
      ],
      "Motivating Self": [
        "What internal factors drive your motivation?",
        "How do you maintain focus when facing obstacles?",
        "What goals energize you the most?"
      ],
      "Empathy": [
        "How do you recognize emotional cues in others?",
        "What helps you understand different perspectives?",
        "How do you respond when someone is upset?"
      ],
      "Self Regulation": [
        "What strategies help you manage strong emotions?",
        "How do you handle pressure in challenging situations?",
        "What techniques help you stay calm and focused?"
      ]
    };
    
    results.scores.forEach((score) => {
      if (yPosition > 250) {
        pdf.addPage();
        yPosition = 30;
      }
      
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text(score.category, 20, yPosition);
      yPosition += 15;
      
      const questions = reflectionQuestions[score.category as keyof typeof reflectionQuestions] || [];
      questions.forEach((question) => {
        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');
        const lines = pdf.splitTextToSize(`â€¢ ${question}`, 170);
        pdf.text(lines, 25, yPosition);
        yPosition += lines.length * 5 + 5;
        
        if (yPosition > 270) {
          pdf.addPage();
          yPosition = 30;
        }
      });
      
      yPosition += 10;
    });
    
    // Add footer
    const pageCount = pdf.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Page ${i} of ${pageCount}`, 180, 285);
      pdf.text('Generated by Personal Assessment Platform', 20, 285);
    }
    
    // Download the PDF
    const fileName = `assessment-report-${results.userInfo.name.replace(/\s+/g, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(fileName);
    
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF report');
  }
};